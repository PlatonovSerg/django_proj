--
-- PostgreSQL database dump
--

-- Dumped from database version 13.10 (Debian 13.10-1.pgdg110+1)
-- Dumped by pg_dump version 13.10 (Debian 13.10-1.pgdg110+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: auth_group; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.auth_group (
    id integer NOT NULL,
    name character varying(150) NOT NULL
);


ALTER TABLE public.auth_group OWNER TO blog;

--
-- Name: auth_group_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.auth_group ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_group_permissions; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.auth_group_permissions (
    id bigint NOT NULL,
    group_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_group_permissions OWNER TO blog;

--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.auth_group_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_permission; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.auth_permission (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) NOT NULL
);


ALTER TABLE public.auth_permission OWNER TO blog;

--
-- Name: auth_permission_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.auth_permission ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.auth_user (
    id integer NOT NULL,
    password character varying(128) NOT NULL,
    last_login timestamp with time zone,
    is_superuser boolean NOT NULL,
    username character varying(150) NOT NULL,
    first_name character varying(150) NOT NULL,
    last_name character varying(150) NOT NULL,
    email character varying(254) NOT NULL,
    is_staff boolean NOT NULL,
    is_active boolean NOT NULL,
    date_joined timestamp with time zone NOT NULL
);


ALTER TABLE public.auth_user OWNER TO blog;

--
-- Name: auth_user_groups; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.auth_user_groups (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    group_id integer NOT NULL
);


ALTER TABLE public.auth_user_groups OWNER TO blog;

--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.auth_user_groups ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.auth_user ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user_user_permissions; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.auth_user_user_permissions (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_user_user_permissions OWNER TO blog;

--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.auth_user_user_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_user_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: blog_comment; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.blog_comment (
    id bigint NOT NULL,
    name character varying(80) NOT NULL,
    email character varying(254) NOT NULL,
    body text NOT NULL,
    created timestamp with time zone NOT NULL,
    updated timestamp with time zone NOT NULL,
    active boolean NOT NULL,
    post_id bigint NOT NULL
);


ALTER TABLE public.blog_comment OWNER TO blog;

--
-- Name: blog_comment_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.blog_comment ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.blog_comment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: blog_post; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.blog_post (
    id bigint NOT NULL,
    title character varying(250) NOT NULL,
    slug character varying(250) NOT NULL,
    body text NOT NULL,
    publish timestamp with time zone NOT NULL,
    created timestamp with time zone NOT NULL,
    updated timestamp with time zone NOT NULL,
    status character varying(2) NOT NULL,
    author_id integer NOT NULL,
    image character varying(100) NOT NULL
);


ALTER TABLE public.blog_post OWNER TO blog;

--
-- Name: blog_post_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.blog_post ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.blog_post_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_admin_log; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.django_admin_log (
    id integer NOT NULL,
    action_time timestamp with time zone NOT NULL,
    object_id text,
    object_repr character varying(200) NOT NULL,
    action_flag smallint NOT NULL,
    change_message text NOT NULL,
    content_type_id integer,
    user_id integer NOT NULL,
    CONSTRAINT django_admin_log_action_flag_check CHECK ((action_flag >= 0))
);


ALTER TABLE public.django_admin_log OWNER TO blog;

--
-- Name: django_admin_log_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.django_admin_log ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_admin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_content_type; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.django_content_type (
    id integer NOT NULL,
    app_label character varying(100) NOT NULL,
    model character varying(100) NOT NULL
);


ALTER TABLE public.django_content_type OWNER TO blog;

--
-- Name: django_content_type_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.django_content_type ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_content_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_migrations; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.django_migrations (
    id bigint NOT NULL,
    app character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    applied timestamp with time zone NOT NULL
);


ALTER TABLE public.django_migrations OWNER TO blog;

--
-- Name: django_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.django_migrations ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_migrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_session; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.django_session (
    session_key character varying(40) NOT NULL,
    session_data text NOT NULL,
    expire_date timestamp with time zone NOT NULL
);


ALTER TABLE public.django_session OWNER TO blog;

--
-- Name: django_site; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.django_site (
    id integer NOT NULL,
    domain character varying(100) NOT NULL,
    name character varying(50) NOT NULL
);


ALTER TABLE public.django_site OWNER TO blog;

--
-- Name: django_site_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.django_site ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_site_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: taggit_tag; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.taggit_tag (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    slug character varying(100) NOT NULL
);


ALTER TABLE public.taggit_tag OWNER TO blog;

--
-- Name: taggit_tag_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.taggit_tag ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.taggit_tag_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: taggit_taggeditem; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.taggit_taggeditem (
    id integer NOT NULL,
    object_id integer NOT NULL,
    content_type_id integer NOT NULL,
    tag_id integer NOT NULL
);


ALTER TABLE public.taggit_taggeditem OWNER TO blog;

--
-- Name: taggit_taggeditem_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.taggit_taggeditem ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.taggit_taggeditem_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Data for Name: auth_group; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.auth_group (id, name) FROM stdin;
\.


--
-- Data for Name: auth_group_permissions; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.auth_group_permissions (id, group_id, permission_id) FROM stdin;
\.


--
-- Data for Name: auth_permission; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.auth_permission (id, name, content_type_id, codename) FROM stdin;
1	Can add log entry	1	add_logentry
2	Can change log entry	1	change_logentry
3	Can delete log entry	1	delete_logentry
4	Can view log entry	1	view_logentry
5	Can add permission	2	add_permission
6	Can change permission	2	change_permission
7	Can delete permission	2	delete_permission
8	Can view permission	2	view_permission
9	Can add group	3	add_group
10	Can change group	3	change_group
11	Can delete group	3	delete_group
12	Can view group	3	view_group
13	Can add user	4	add_user
14	Can change user	4	change_user
15	Can delete user	4	delete_user
16	Can view user	4	view_user
17	Can add content type	5	add_contenttype
18	Can change content type	5	change_contenttype
19	Can delete content type	5	delete_contenttype
20	Can view content type	5	view_contenttype
21	Can add session	6	add_session
22	Can change session	6	change_session
23	Can delete session	6	delete_session
24	Can view session	6	view_session
25	Can add post	7	add_post
26	Can change post	7	change_post
27	Can delete post	7	delete_post
28	Can view post	7	view_post
29	Can add comment	8	add_comment
30	Can change comment	8	change_comment
31	Can delete comment	8	delete_comment
32	Can view comment	8	view_comment
33	Can add tag	9	add_tag
34	Can change tag	9	change_tag
35	Can delete tag	9	delete_tag
36	Can view tag	9	view_tag
37	Can add tagged item	10	add_taggeditem
38	Can change tagged item	10	change_taggeditem
39	Can delete tagged item	10	delete_taggeditem
40	Can view tagged item	10	view_taggeditem
41	Can add site	11	add_site
42	Can change site	11	change_site
43	Can delete site	11	delete_site
44	Can view site	11	view_site
\.


--
-- Data for Name: auth_user; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.auth_user (id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined) FROM stdin;
2	pbkdf2_sha256$870000$006Ehj35eAt4rR0fFYiJXr$Xg+qD0IeVRgzPbyTu63sss33hnAsgDyCfNgEsByOL2o=	2024-08-25 11:21:29.896916+00	f	love	Boorzimor	Larina	julylarik@yandex.ru	t	t	2024-08-24 23:55:42+00
1	pbkdf2_sha256$870000$RhqHVy4CJ1CVs0CVMQx6CN$IjB3xdTJSXp2PmhSU+lAj+ba9yTW1thoFNNsIAc+HWw=	2024-08-27 10:30:12.340349+00	t	platonov	sergei	platonov	platonov1727@yandex.ru	t	t	2024-08-24 21:35:08+00
\.


--
-- Data for Name: auth_user_groups; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.auth_user_groups (id, user_id, group_id) FROM stdin;
\.


--
-- Data for Name: auth_user_user_permissions; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.auth_user_user_permissions (id, user_id, permission_id) FROM stdin;
1	2	17
2	2	18
3	2	19
4	2	20
5	2	21
6	2	22
7	2	23
8	2	24
9	2	25
10	2	26
11	2	27
12	2	28
13	2	29
14	2	30
15	2	31
16	2	32
17	2	33
18	2	34
19	2	35
20	2	36
21	2	37
22	2	38
23	2	39
24	2	40
25	2	41
26	2	42
27	2	43
28	2	44
\.


--
-- Data for Name: blog_comment; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.blog_comment (id, name, email, body, created, updated, active, post_id) FROM stdin;
\.


--
-- Data for Name: blog_post; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.blog_post (id, title, slug, body, publish, created, updated, status, author_id, image) FROM stdin;
3	GIL в Python: Что это такое, его плюсы и минусы	gil-v-python-chto-eto-takoe-ego-plyusy-i-minusy	## Что такое GIL?\r\n\r\n**GIL** (Global Interpreter Lock) — это глобальная блокировка интерпретатора в CPython, которая позволяет только одному потоку выполнять Python-код в любой момент времени. Это означает, что даже если в программе задействовано несколько потоков, только один из них может одновременно выполнять код на Python. GIL присутствует в основном в интерпретаторе **CPython**, который является наиболее распространённой реализацией Python.\r\n\r\n## Плюсы GIL\r\n\r\n1. **Простота реализации**: GIL значительно упрощает разработку интерпретатора CPython, позволяя избегать сложных проблем синхронизации при доступе к объектам Python из разных потоков.\r\n2. **Безопасность памяти**: Благодаря GIL, CPython избегает множества проблем с управлением памятью и взаимодействием между потоками, что делает программы более безопасными и стабильными.\r\n3. **Быстрая работа однопоточных программ**: В задачах, где используется один поток, GIL не оказывает отрицательного влияния, и программы могут выполняться достаточно быстро благодаря оптимизациям, которые возможны в его присутствии.\r\n\r\n## Минусы GIL\r\n\r\n1. **Ограничение многопоточности**: GIL существенно ограничивает производительность многопоточных программ, особенно на многопроцессорных системах. Хотя потоки могут выполнять операции ввода-вывода параллельно, выполнение CPU-интенсивных задач остаётся ограниченным.\r\n2. **Неэффективное использование многопроцессорных систем**: На системах с несколькими процессорами или ядрами GIL мешает эффективному использованию всех доступных вычислительных ресурсов, что может привести к значительным потерям производительности.\r\n3. **Сложности с масштабированием**: В случаях, когда программа должна масштабироваться для обработки больших объёмов данных с использованием потоков, GIL становится узким местом.\r\n\r\n## Почему GIL не убирают?\r\n\r\nGIL существует с самого начала создания CPython, и его удаление представляется сложной задачей по нескольким причинам:\r\n\r\n1. **Обратная совместимость**: Удаление GIL потребовало бы значительных изменений в существующем коде, что может привести к несовместимости с огромным количеством библиотек и программ.\r\n2. **Усложнение реализации**: Без GIL разработчикам CPython пришлось бы внедрить более сложные механизмы синхронизации, что могло бы замедлить работу многих однопоточных приложений и увеличить сложность интерпретатора.\r\n3. **Проблемы с производительностью**: В некоторых тестах попытки убрать GIL приводили к ухудшению производительности однопоточных программ, что делает такие изменения неприемлемыми для широкого круга пользователей.\r\n\r\n## Альтернативы CPython без GIL\r\n\r\nДля тех, кто сталкивается с ограничениями GIL и ищет альтернативные решения, существуют несколько других реализаций Python, в которых GIL либо отсутствует, либо используется другой подход к многопоточности:\r\n\r\n1. **Jython**: Реализация Python на платформе Java. В Jython отсутствует GIL, и многопоточность реализована с использованием JVM (Java Virtual Machine).\r\n2. **IronPython**: Реализация Python для платформы .NET, также не имеет GIL и использует механизмы многопоточности, доступные в .NET.\r\n3. **PyPy**: Альтернативная реализация Python с использованием JIT-компиляции для ускорения выполнения кода. В PyPy GIL также присутствует, но производительность некоторых многопоточных задач может быть выше за счёт JIT-оптимизаций.\r\n4. **Cython**: Хотя это не полная реализация Python, Cython позволяет писать C-расширения для Python, которые могут обходить GIL в критически важных секциях кода, тем самым улучшая производительность многопоточных программ.\r\n\r\n## Заключение\r\n\r\nGIL остаётся важной частью экосистемы CPython, обеспечивая простоту и безопасность для разработчиков, но накладывая ограничения на многопоточность. В зависимости от требований вашего проекта, вы можете использовать CPython для однопоточных или IO-интенсивных задач, или рассмотреть альтернативные реализации Python, если требуется максимальная производительность в многопоточных средах. Выбор подходящего инструмента зависит от специфики задачи и требований к производительности.	2024-08-24 21:50:00+00	2024-08-24 21:50:28.882257+00	2024-08-24 21:50:40.827548+00	PB	1	posts/2024/08/24/0_2_средний_размер.jpeg
4	Асинхронность, многопоточность и мультипроцессинг в Python: В чём разница?	asinhronnost-mnogopotochnost-i-multiprocessing-v-python-v-chyom-raznica	Когда речь идёт о выполнении нескольких задач одновременно в Python, часто возникают термины **асинхронность**, **многопоточность** и **мультипроцессинг**. Эти три концепции помогают оптимизировать работу программ, улучшая производительность и управляемость задач. Однако у них есть важные различия, которые определяют их использование в разных сценариях.\r\n\r\n## Асинхронность\r\n\r\nАсинхронность позволяет программе выполнять другие задачи, не дожидаясь завершения текущей операции. В Python асинхронность реализуется с помощью ключевых слов `async` и `await` и библиотеки `asyncio`.\r\n\r\n### Особенности асинхронности:\r\n\r\n- **Неблокирующий ввод-вывод**: Асинхронность особенно полезна при работе с операциями ввода-вывода (например, сетевыми запросами), позволяя выполнять другие задачи, пока ожидается ответ.\r\n- **Однопоточная модель**: Асинхронные задачи выполняются в одном потоке, избегая проблем с синхронизацией данных.\r\n- **Управление задачами**: Асинхронность лучше всего подходит для приложений с большим количеством ожиданий (например, запросов к базе данных или внешним API).\r\n\r\n## Многопоточность\r\n\r\nМногопоточность позволяет выполнять несколько потоков (threads) одновременно внутри одного процесса. В Python многопоточность реализуется с помощью модуля `threading`. Несмотря на наличие GIL (Global Interpreter Lock), многопоточность полезна в задачах, не требующих значительных вычислительных ресурсов.\r\n\r\n### Особенности многопоточности:\r\n\r\n- **Параллелизм задач**: Позволяет выполнять несколько задач одновременно, используя несколько потоков.\r\n- **GIL и ограничения**: Из-за GIL выполнение Python-кода в разных потоках ограничено одним потоком одновременно, что снижает эффективность на многопроцессорных системах.\r\n- **Полезно для ввода-вывода**: Многопоточность хорошо подходит для задач, связанных с вводом-выводом (например, работа с файлами, сетевые операции), но менее эффективна для CPU-интенсивных задач.\r\n\r\n## Мультипроцессинг\r\n\r\nМультипроцессинг (многопроцессность) позволяет создавать несколько процессов, каждый из которых выполняется в собственной памяти и не зависит от других процессов. В Python это реализуется с помощью модуля `multiprocessing`.\r\n\r\n### Особенности мультипроцессинга:\r\n\r\n- **Полное использование CPU**: Мультипроцессинг позволяет обходить ограничения GIL, так как каждый процесс имеет свой собственный интерпретатор Python и память.\r\n- **Высокая производительность**: Подходит для задач, требующих больших вычислительных ресурсов, например, для обработки данных или вычислений.\r\n- **Изолированная память**: Процессы не разделяют память, что предотвращает проблемы с синхронизацией, но делает межпроцессное взаимодействие более сложным.\r\n\r\n## Когда использовать что?\r\n\r\n- **Асинхронность**:\r\n  - Подходит для задач с большим количеством ввода-вывода.\r\n  - Идеальна для приложений с ожиданием ответа от внешних систем (например, запросы к API).\r\n  - Однопоточная модель без блокировок.\r\n\r\n- **Многопоточность**:\r\n  - Подходит для задач с вводом-выводом, которые могут выполняться параллельно.\r\n  - Менее эффективна для задач, требующих значительных вычислительных ресурсов из-за GIL.\r\n\r\n- **Мультипроцессинг**:\r\n  - Подходит для CPU-интенсивных задач, требующих максимальной производительности.\r\n  - Эффективно использует многопроцессорные системы.\r\n  - Подходит для задач, требующих полной изоляции памяти между процессами.\r\n\r\n## Заключение\r\n\r\nВыбор между асинхронностью, многопоточностью и мультипроцессингом зависит от характера вашей задачи. Если нужно эффективно обрабатывать множество запросов ввода-вывода — выбирайте асинхронность. Если необходимо параллельно обрабатывать задачи, которые не требуют значительных вычислительных ресурсов, — многопоточность может быть хорошим выбором. А для задач, требующих интенсивных вычислений и максимального использования процессорных ядер, лучшим вариантом будет мультипроцессинг.	2024-08-24 21:57:24+00	2024-08-24 21:58:16.739633+00	2024-08-24 21:58:47.087606+00	PB	1	posts/2024/08/24/0_2-2_крупный_размер.jpeg
2	Микросервисы: Что это такое и чем они отличаются от монолитов?	mikroservisy-chto-eto-takoe-i-chem-oni-otlichayutsya-ot-monolitov	В последние годы микросервисная архитектура стала популярной среди разработчиков программного обеспечения. Однако, чтобы понять, почему многие компании переходят на микросервисы, важно разобраться, что это такое и чем они отличаются от традиционных монолитных приложений.\r\n\r\n## Что такое микросервисы?\r\n\r\nМикросервисы — это подход к архитектуре программного обеспечения, при котором приложение разбивается на небольшие, независимые сервисы. Каждый такой сервис выполняет конкретную задачу и может работать автономно, общаясь с другими сервисами через хорошо определённые интерфейсы, такие как HTTP API или очередь сообщений.\r\n\r\n### Основные характеристики микросервисов:\r\n1. **Малые размеры**: Каждый микросервис отвечает за одну, чётко определённую функциональность.\r\n2. **Независимость**: Микросервисы могут разрабатываться, развертываться и масштабироваться независимо друг от друга.\r\n3. **Гибкость**: Возможность выбора различных технологий и языков программирования для каждого сервиса.\r\n4. **Легкость масштабирования**: Микросервисы можно масштабировать независимо, что позволяет улучшить производительность тех частей системы, которые испытывают наибольшую нагрузку.\r\n\r\n## Монолитные приложения\r\n\r\nВ противоположность микросервисам, монолитная архитектура представляет собой единое приложение, в котором весь код тесно связан между собой. Монолитное приложение состоит из одной большой кодовой базы, которая выполняется как единое целое.\r\n\r\n### Основные характеристики монолитов:\r\n1. **Единая кодовая база**: Все функциональные модули тесно связаны и находятся в одном проекте.\r\n2. **Общие ресурсы**: В монолите все компоненты разделяют одни и те же ресурсы (базу данных, файловую систему и т.д.).\r\n3. **Сложность масштабирования**: Масштабирование монолита может быть сложным, так как необходимо масштабировать всё приложение целиком.\r\n4. **Трудности в обновлении**: Любое изменение требует развертывания всего приложения, что увеличивает риск сбоев.\r\n\r\n## Сравнение микросервисов и монолитов\r\n\r\n| **Критерий**                | **Микросервисы**                                                      | **Монолиты**                                               |\r\n|-----------------------------|-----------------------------------------------------------------------|------------------------------------------------------------|\r\n| **Архитектура**             | Разделённая на независимые сервисы                                    | Единая, интегрированная система                            |\r\n| **Масштабирование**         | Независимое масштабирование отдельных сервисов                        | Масштабирование всей системы целиком                       |\r\n| **Обновление и развертывание** | Быстрое, частичное развертывание и обновление                     | Обновление требует развертывания всего приложения          |\r\n| **Технологический стек**    | Разные технологии для разных сервисов                                 | Единый технологический стек для всего приложения           |\r\n| **Сложность**               | Сложное управление несколькими сервисами и их взаимодействием         | Простота управления одной кодовой базой                    |\r\n\r\n## Когда использовать микросервисы, а когда монолиты?\r\n\r\n- **Микросервисы**:\r\n  - Подходят для крупных, сложных систем с высоким уровнем нагрузки.\r\n  - Полезны, если нужно часто обновлять отдельные части системы без риска для всего приложения.\r\n  - Выбор для команд, где есть опыт работы с распределёнными системами и DevOps.\r\n\r\n- **Монолиты**:\r\n  - Идеальны для небольших проектов с простой логикой.\r\n  - Подходят для стартапов и прототипов, где важна скорость разработки и простота развертывания.\r\n  - Легче отлаживать и поддерживать на начальных этапах.\r\n\r\n## Заключение\r\n\r\nВыбор между микросервисами и монолитами зависит от конкретных требований и целей вашего проекта. Микросервисы предлагают гибкость и масштабируемость, но требуют более сложного управления и мониторинга. Монолитные приложения, в свою очередь, проще в разработке и поддержке, но могут столкнуться с ограничениями при росте нагрузки и расширении функциональности. Правильное решение зависит от размера проекта, команды и бизнес-задач.	2024-08-24 21:48:26+00	2024-08-24 21:49:29.013973+00	2024-08-24 22:18:46.856231+00	PB	1	posts/2024/08/24/0_0_средний_размер.jpeg
5	Планирование времени для удалённой работы: Советы программистам	planirovanie-vremeni-dlya-udalyonnoj-raboty-sovety-programmistam	Удалённая работа предлагает множество преимуществ, таких как гибкость и комфорт, но также она требует дисциплины и эффективного планирования времени. Для программистов, которые работают удалённо, правильное распределение рабочего времени может значительно повысить продуктивность и улучшить баланс между работой и личной жизнью. В этом посте рассмотрим советы, которые помогут вам лучше планировать свой день и неделю.\r\n\r\n## 1. Установите чёткий рабочий график\r\n\r\n### Почему это важно:\r\n\r\nРаботая из дома, легко потерять границы между работой и личной жизнью. Установление чёткого рабочего времени поможет вам избежать переработок и выгорания.\r\n\r\n### Как это сделать:\r\n\r\n- Определите время начала и окончания работы и старайтесь придерживаться этого расписания ежедневно.\r\n- Уведомляйте коллег о вашем рабочем графике, чтобы они знали, когда вы доступны.\r\n\r\n## 2. Разделяйте задачи на более мелкие\r\n\r\n### Почему это важно:\r\n\r\nРазделение крупных задач на более мелкие помогает лучше организовать работу и избежать чувства перегруженности.\r\n\r\n### Как это сделать:\r\n\r\n- Используйте методику **Pomodoro**: работайте 25 минут, а затем делайте 5-минутный перерыв. После четырёх таких циклов сделайте более длительный перерыв.\r\n- Пишите подробные списки задач для каждого дня, выделяя приоритетные задачи.\r\n\r\n## 3. Планируйте неделю заранее\r\n\r\n### Почему это важно:\r\n\r\nПланирование на неделю вперёд помогает лучше распределить время и избежать срочных и неожиданных задач.\r\n\r\n### Как это сделать:\r\n\r\n- В начале недели определите ключевые задачи, которые нужно выполнить, и разбейте их на дни.\r\n- Выделите время для встреч, обзоров кода и других регулярных активностей.\r\n\r\n## 4. Учитывайте свои биоритмы\r\n\r\n### Почему это важно:\r\n\r\nУ каждого человека есть периоды, когда он наиболее продуктивен. Планирование работы в это время помогает достигать максимальной эффективности.\r\n\r\n### Как это сделать:\r\n\r\n- Отслеживайте свою продуктивность в течение дня и определите, когда у вас пик энергии.\r\n- Старайтесь выполнять самые сложные задачи в это время, а более простые задачи оставляйте на периоды спада энергии.\r\n\r\n## 5. Минимизируйте отвлекающие факторы\r\n\r\n### Почему это важно:\r\n\r\nДомашняя обстановка может способствовать отвлечениям, что негативно сказывается на концентрации и производительности.\r\n\r\n### Как это сделать:\r\n\r\n- Создайте отдельное рабочее пространство, которое будет ассоциироваться исключительно с работой.\r\n- Используйте приложения для блокировки отвлекающих сайтов и уведомлений на время работы.\r\n\r\n## 6. Делайте регулярные перерывы\r\n\r\n### Почему это важно:\r\n\r\nПерерывы помогают сохранить концентрацию и снизить усталость в течение рабочего дня.\r\n\r\n### Как это сделать:\r\n\r\n- Делайте короткие перерывы каждые 25-30 минут работы.\r\n- Используйте перерывы для лёгкой физической активности или медитации.\r\n\r\n## 7. Анализируйте свою продуктивность\r\n\r\n### Почему это важно:\r\n\r\nРегулярный анализ того, как вы тратите своё время, позволяет находить способы улучшить планирование и повысить эффективность.\r\n\r\n### Как это сделать:\r\n\r\n- В конце недели оценивайте, насколько успешно вы выполнили свои задачи.\r\n- Корректируйте планирование на следующую неделю, учитывая прошлые успехи и неудачи.\r\n\r\n## Заключение\r\n\r\nЭффективное планирование времени — ключ к успешной работе на удалёнке. Чёткий рабочий график, разделение задач, учёт личных биоритмов и минимизация отвлекающих факторов помогут вам оставаться продуктивным и достигать поставленных целей. Применяя эти советы на практике, вы сможете не только повысить свою эффективность, но и создать здоровый баланс между работой и личной жизнью.	2024-08-24 22:04:42+00	2024-08-24 22:05:56.960606+00	2024-08-24 22:48:17.908859+00	PB	1	posts/2024/08/24/0_3-2.jpeg
1	FastAPI vs Django: Что выбрать для вашего проекта?	fastapi-vs-django-chto-vybrat-dlya-vashego-proekta	При выборе фреймворка для разработки веб-приложений разработчики часто сталкиваются с выбором между **FastAPI** и **Django**. Оба фреймворка являются мощными инструментами, но имеют свои особенности и предназначены для различных сценариев использования.\r\n\r\n## FastAPI\r\n\r\n**FastAPI** — это современный, высокопроизводительный фреймворк для создания API на Python, который фокусируется на скорости разработки и выполнения кода. \r\n\r\n### Преимущества FastAPI:\r\n1. **Высокая производительность**: FastAPI построен на основе асинхронных вызовов и использует `Starlette` и `Pydantic`, что делает его одним из самых быстрых Python-фреймворков.\r\n2. **Современные стандарты**: Встроенная поддержка типов данных и аннотаций Python 3.6+ позволяет реализовать автоматическую валидацию входных данных и генерацию документации.\r\n3. **Асинхронность**: Поддержка асинхронных операций "из коробки", что особенно полезно для приложений, требующих высокой степени параллелизма (например, чат-приложения, WebSocket).\r\n4. **Документация**: FastAPI автоматически генерирует интерактивную документацию с помощью OpenAPI и Swagger, что облегчает тестирование и интеграцию API.\r\n\r\n### Когда использовать FastAPI:\r\n- Создание высокопроизводительных API с низкой задержкой.\r\n- Разработка микросервисов.\r\n- Проекты, где важна скорость выполнения операций и асинхронные задачи.\r\n- Необходимость быстрого создания прототипов с автоматической генерацией документации.\r\n\r\n## Django\r\n\r\n**Django** — это мощный и зрелый фреймворк для разработки веб-приложений, который существует уже много лет и используется в тысячах проектов по всему миру.\r\n\r\n### Преимущества Django:\r\n1. **Комплексность**: Django предоставляет все необходимое для создания полного веб-приложения "из коробки", включая ORM, аутентификацию, админ-панель и многое другое.\r\n2. **Большая экосистема**: Огромное количество готовых библиотек и пакетов, которые можно интегрировать в проект.\r\n3. **Стабильность**: Django давно существует на рынке, что делает его очень надежным и проверенным временем инструментом.\r\n4. **Сообщество**: Большое сообщество и обширная документация облегчают решение любых возникающих проблем.\r\n\r\n### Когда использовать Django:\r\n- Разработка полноценных веб-приложений с минимальными затратами на настройку.\r\n- Проекты с мощной серверной частью, где важна комплексная бизнес-логика.\r\n- Административные панели и системы управления контентом.\r\n- Проекты, требующие классической архитектуры MVC (Model-View-Controller).\r\n\r\n## Заключение\r\n\r\nВыбор между FastAPI и Django зависит от задач, стоящих перед вами. **FastAPI** идеально подходит для создания высокопроизводительных и асинхронных API, где важна скорость. **Django**, с другой стороны, является лучшим выбором для комплексных веб-приложений, требующих надежности и зрелости. Правильный выбор фреймворка позволит вам быстрее достичь поставленных целей и обеспечить долгосрочную поддержку вашего проекта.	2024-08-24 21:37:16+00	2024-08-24 21:41:08.644977+00	2024-08-25 00:00:32.717339+00	PB	1	posts/2024/08/24/fastanddjango.jpeg
6	Руководство по настройке Nginx для статических и медиафайлов в Django	rukovodstvo-po-nastrojke-nginx-dlya-staticheskih-i-mediafajlov-v-django	Nginx — это популярный веб-сервер и обратный прокси-сервер, который известен своей производительностью и низким потреблением ресурсов. Его часто используют для обслуживания статических файлов и медиафайлов, а также в качестве обратного прокси для приложений на Django.\r\n\r\n## Установка Nginx\r\n\r\n### Установка на Ubuntu/Debian\r\n\r\nДля установки Nginx на Ubuntu или Debian выполните следующие команды:\r\n\r\n```bash\r\nsudo apt update\r\nsudo apt install nginx\r\n```\r\nПосле установки, Nginx будет автоматически запущен. Проверьте статус сервера с помощью команды:\r\n```bash\r\nsudo systemctl status nginx\r\n```\r\nВы должны увидеть сообщение о том, что сервис активен (active (running)).\r\n\r\n## Установка на CentOS/RHEL\r\n\r\nНа CentOS или RHEL установка выполняется следующим образом:\r\n```bash\r\nsudo yum install epel-release\r\nsudo yum install nginx\r\n```\r\nПосле установки запустите и включите Nginx:\r\n```bash\r\nsudo systemctl start nginx\r\nsudo systemctl enable nginx\r\n```\r\n## Основные концепции Nginx\r\n\r\nNginx использует блоки конфигурации для настройки работы сервера:\r\n\r\n\t•\tserver: Блок для конфигурации конкретного виртуального хоста.\r\n\t•\tlocation: Внутри блока server указываются правила маршрутизации запросов на сервер.\r\n\r\nФайл конфигурации по умолчанию находится по пути /etc/nginx/nginx.conf, но, как правило, для каждого сайта создается отдельный конфигурационный файл в /etc/nginx/sites-available/, с символической ссылкой в /etc/nginx/sites-enabled/.\r\n\r\n## Настройка Nginx для Django\r\n\r\nDjango обычно используется вместе с WSGI-сервером, например, Gunicorn или uWSGI. Nginx будет выступать в роли обратного прокси, перенаправляя HTTP-запросы на WSGI-сервер, который, в свою очередь, будет взаимодействовать с Django.\r\n\r\n## Базовая настройка Nginx для Django\r\n\r\nСоздайте новый файл конфигурации для вашего проекта Django:\r\n```bash\r\nsudo nano /etc/nginx/sites-available/myproject\r\n```\r\nДобавьте следующую конфигурацию:\r\n```bash\r\nserver {\r\n    listen 80;\r\n    server_name mydomain.com www.mydomain.com;\r\n\r\n    location / {\r\n        proxy_pass http://127.0.0.1:8000;\r\n        proxy_set_header Host $host;\r\n        proxy_set_header X-Real-IP $remote_addr;\r\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header X-Forwarded-Proto $scheme;\r\n    }\r\n\r\n    location /static/ {\r\n        alias /path/to/your/staticfiles/;\r\n    }\r\n\r\n    location /media/ {\r\n        alias /path/to/your/mediafiles/;\r\n    }\r\n}\r\n```\r\nРазбор конфигурации\r\n\r\n\t•\tlisten 80;: Указывает на то, что Nginx будет прослушивать HTTP-запросы на порту 80.\r\n\t•\tserver_name mydomain.com www.mydomain.com;: Указывает доменные имена, которые будут обслуживаться этим серверным блоком.\r\n\t•\tlocation /: Этот блок конфигурации передает все запросы на URL / вашему WSGI-серверу (например, Gunicorn), работающему на 127.0.0.1:8000.\r\n\t•\tlocation /static/: Этот блок конфигурации обслуживает статические файлы. Путь /path/to/your/staticfiles/ замените на фактический путь к статическим файлам в вашем проекте.\r\n\t•\tlocation /media/: Этот блок конфигурации обслуживает медиафайлы. Путь /path/to/your/mediafiles/ замените на фактический путь к медиафайлам в вашем проекте.\r\n\r\n## Активация конфигурации\r\n\r\nСоздайте символическую ссылку в каталоге sites-enabled, чтобы активировать новую конфигурацию:\r\n```bash\r\nsudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled/\r\n```\r\nЗатем проверьте конфигурацию Nginx на наличие синтаксических ошибок:\r\n```bash\r\nsudo nginx -t\r\n```\r\nЕсли ошибок нет, перезапустите Nginx, чтобы применить изменения:\r\n```bash\r\nsudo systemctl restart nginx\r\n```\r\n## Заключение\r\n\r\nТеперь Nginx настроен для обслуживания статических и медиафайлов вашего Django-приложения. Он будет принимать HTTP-запросы, передавать их на ваш WSGI-сервер, и обслуживать статические и медиафайлы напрямую. Это значительно повышает производительность вашего приложения и снижает нагрузку на сервер Django.\r\n\r\nЭтот документ использует синтаксис Markdown для форматирования текста, включая заголовки, списки, блоки кода и текстовые выделения. Markdown позволяет легко читать и редактировать текст, делая его удобным для написания документации, README-файлов и статей.	2024-08-27 09:19:49+00	2024-08-27 09:21:37.83904+00	2024-08-27 09:36:48.552187+00	PB	1	posts/2024/08/27/0_1.jpeg
8	Контекстные менеджеры в Python	kontekstnye-menedzhery-v-python	Контекстные менеджеры — это мощный инструмент в Python, который позволяет удобно управлять ресурсами, такими как файлы, сетевые соединения, блокировки и другие объекты, которые требуют выделения и освобождения ресурсов. В данной статье мы рассмотрим, что такое контекстные менеджеры, как они работают и когда лучше их использовать.\r\n\r\n## Что такое контекстные менеджеры\r\n\r\nКонтекстные менеджеры предоставляют способ автоматического выполнения начальной настройки и последующего освобождения ресурсов. Основной механизм использования контекстных менеджеров в Python — это ключевое слово `with`.\r\n\r\nПример простого использования контекстного менеджера для работы с файлами:\r\n\r\n```python\r\nwith open('example.txt', 'r') as file:\r\n    content = file.read()\r\n```\r\n\r\nЗдесь `open()` открывает файл и возвращает файловый объект, а `with` гарантирует, что файл будет закрыт после завершения блока кода.\r\n\r\n## Как работают контекстные менеджеры\r\n\r\nКонтекстные менеджеры реализуют два специальных метода:\r\n\r\n- `__enter__(self)`: Выполняется, когда выполнение программы входит в контекст (блок `with`).\r\n- `__exit__(self, exc_type, exc_value, traceback)`: Выполняется, когда выполнение программы выходит из контекста, даже если внутри блока произошла ошибка.\r\n\r\nПример реализации собственного контекстного менеджера:\r\n\r\n```python\r\nclass MyContextManager:\r\n    def __enter__(self):\r\n        print("Entering the context")\r\n        return self\r\n    \r\n    def __exit__(self, exc_type, exc_value, traceback):\r\n        print("Exiting the context")\r\n\r\nwith MyContextManager():\r\n    print("Inside the context")\r\n```\r\n\r\nЭтот код выведет:\r\n\r\n```\r\nEntering the context\r\nInside the context\r\nExiting the context\r\n```\r\n\r\n## Когда использовать контекстные менеджеры\r\n\r\nКонтекстные менеджеры полезны в следующих случаях:\r\n\r\n1. **Работа с файлами**: Как показано выше, контекстные менеджеры автоматически закрывают файлы.\r\n2. **Работа с сетевыми соединениями**: Можно автоматически закрывать соединения после их использования.\r\n3. **Управление транзакциями**: В базах данных можно гарантировать завершение или откат транзакции.\r\n4. **Блокировки**: Можно безопасно работать с многопоточными приложениями, освобождая блокировки по завершении операций.\r\n5. **Обработка исключений**: Можно обрабатывать ошибки, возникающие в блоке кода, и выполнять определённые действия перед завершением контекста.\r\n\r\n## Заключение\r\n\r\nКонтекстные менеджеры — это важный инструмент для эффективного управления ресурсами в Python. Они позволяют писать более чистый и безопасный код, снижая вероятность ошибок, связанных с неправильным освобождением ресурсов. Использование `with` и создание собственных контекстных менеджеров делает ваш код более читаемым и устойчивым к ошибкам.	2024-08-27 10:30:16+00	2024-08-27 10:32:31.263719+00	2024-08-27 10:32:31.263728+00	PB	1	posts/2024/08/27/context.jpeg
9	Интеграция Markdown в Django	integraciya-markdown-v-django	Markdown — это легковесный язык разметки, который используется для форматирования текста. Интеграция Markdown в Django позволяет легко отображать отформатированный текст в шаблонах и даже поддерживать подсветку синтаксиса для блоков кода. В этой статье мы рассмотрим, как интегрировать поддержку Markdown в Django с использованием фильтров и подсветки кода.\r\n\r\n## Установка необходимых пакетов\r\n\r\nДля начала необходимо установить два пакета: `Markdown` и `Pygments`. Первый используется для обработки Markdown, а второй — для подсветки синтаксиса кода.\r\n\r\nУстановите их с помощью pip:\r\n\r\n```bash\r\npip install markdown pygments\r\n```\r\n\r\n## Настройка фильтра для обработки Markdown\r\n\r\nВ Django можно создать пользовательский фильтр, который будет использоваться в шаблонах для преобразования текста, написанного в Markdown, в HTML. \r\n\r\nСоздайте файл `templatetags/markdown_extras.py` в одном из ваших приложений:\r\n\r\n```python\r\nfrom django import template\r\nimport markdown\r\nfrom markdown.extensions.codehilite import CodeHiliteExtension\r\n\r\nregister = template.Library()\r\n\r\n@register.filter(name='markdown')\r\ndef markdown_format(text):\r\n    return markdown.markdown(\r\n        text, \r\n        extensions=[\r\n            'fenced_code', \r\n            CodeHiliteExtension(noclasses=True)\r\n        ]\r\n    )\r\n```\r\n\r\nЗдесь мы регистрируем фильтр `markdown_format`, который использует расширения Markdown для поддержки "огороженных" блоков кода (`fenced_code`) и подсветки синтаксиса с помощью `CodeHiliteExtension`.\r\n\r\n## Использование фильтра в шаблонах\r\n\r\nТеперь, когда фильтр создан, его можно использовать в шаблонах Django. Например:\r\n\r\n```html\r\n{% load markdown_extras %}\r\n\r\n<article>\r\n    {{ post.content|markdown }}\r\n</article>\r\n```\r\n\r\nПредполагая, что `post.content` содержит текст в формате Markdown, фильтр `markdown` преобразует его в HTML с подсветкой кода.\r\n\r\n## Подключение CSS для подсветки синтаксиса\r\n\r\nДля того чтобы подсветка кода выглядела привлекательно, нужно подключить CSS-стили, предоставляемые `Pygments`. Вы можете выбрать тему для подсветки синтаксиса и добавить соответствующий CSS в свой проект.\r\n\r\nПример добавления стилей в шаблон:\r\n\r\n```html\r\n<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/pygments/2.11.2/styles/default.min.css">\r\n```\r\n\r\nТакже можно сгенерировать CSS файл самостоятельно с помощью команды:\r\n\r\n```bash\r\npygmentize -S default -f html -a .codehilite > pygments.css\r\n```\r\n\r\nПосле этого добавьте сгенерированный файл в статические файлы вашего проекта и подключите его в шаблоне:\r\n\r\n```html\r\n<link rel="stylesheet" href="{% static 'css/pygments.css' %}">\r\n```\r\n\r\n## Расширение возможностей\r\n\r\nЕсли вам требуется больше функциональности, вы можете добавлять дополнительные расширения к Markdown. Например:\r\n\r\n```python\r\nimport markdown\r\nfrom markdown.extensions.tables import TableExtension\r\n\r\nmarkdown.markdown(\r\n    text, \r\n    extensions=[\r\n        'fenced_code', \r\n        CodeHiliteExtension(noclasses=True),\r\n        TableExtension()\r\n    ]\r\n)\r\n```\r\n\r\nЭто добавит поддержку таблиц в ваш Markdown.\r\n\r\n## Заключение\r\n\r\nИнтеграция Markdown в Django — это простой способ улучшить текстовый контент вашего приложения. Используя кастомные фильтры и расширения, можно легко преобразовать текст, написанный в Markdown, в хорошо отформатированный HTML с поддержкой подсветки синтаксиса. Это полезно для блогов, документации и других приложений, где требуется красиво оформленный текст.	2024-08-27 13:03:17+00	2024-08-27 13:06:22.467852+00	2024-08-27 13:06:22.467866+00	PB	1	posts/2024/08/27/4A94508F-4391-4075-BD14-F53F4D36AB35_крупный_размер.jpeg
10	Как Junior Python Backend разработчику найти первую работу	kak-junior-python-backend-razrabotchiku-najti-pervuyu-rabotu	Для Junior Python Backend разработчиков задача найти первую работу может показаться непростой. Конкуренция высокая, а работодатели часто ищут кандидатов с опытом. Однако, если следовать некоторым рекомендациям и проявить упорство, шансы значительно увеличиваются.\r\n\r\n## 1. Прокачайте навыки и создайте портфолио\r\n\r\n### Основные технологии:\r\n- **Python**: Углубленное знание основ, включая такие фреймворки как Django или Flask.\r\n- **Базы данных**: Знание SQL и работа с базами данных, например PostgreSQL или MySQL.\r\n- **REST API**: Опыт создания и документирования API.\r\n- **Git**: Опыт работы с системами контроля версий.\r\n\r\n### Что включить в портфолио:\r\n- **Собственные проекты**: Даже небольшие, но завершённые проекты покажут ваш уровень владения технологиями.\r\n- **Контрибьюции в open-source**: Участие в open-source проектах продемонстрирует вашу способность работать в команде и писать поддерживаемый код.\r\n\r\n## 2. Создайте и развивайте профиль на GitHub\r\n\r\nGitHub — это ваше лицо перед потенциальными работодателями. Следите за качеством кода, оформляйте README файлы для проектов, используйте понятные названия коммитов. Ваш GitHub должен показывать вашу активность и заинтересованность в разработке.\r\n\r\n## 3. Учитесь и улучшайте свои знания\r\n\r\nНе останавливайтесь на достигнутом. Участвуйте в онлайн-курсах, вебинарах, читайте профильные книги и статьи. Например:\r\n\r\n- **Coursera**: Курсы по Python и backend-разработке.\r\n- **Pluralsight** и **Udemy**: Платформы с большим количеством курсов по разным темам.\r\n- **Хакатоны** и **конкурсы**: Отличная возможность набраться опыта и познакомиться с новыми людьми.\r\n\r\n## 4. Составьте качественное резюме и сопроводительное письмо\r\n\r\nРезюме должно быть лаконичным, но информативным. Укажите:\r\n- Ваши навыки и технологии, с которыми работали.\r\n- Учебные проекты и их описание.\r\n- Сертификаты и курсы.\r\n\r\nСопроводительное письмо должно быть персонализированным для каждой компании. Укажите, почему вы хотите работать именно у них и чем вы можете быть полезны.\r\n\r\n## 5. Нетворкинг\r\n\r\nЗнакомства могут сыграть ключевую роль. Посещайте митапы, конференции и другие мероприятия для разработчиков. Вступайте в профессиональные сообщества, общайтесь в профильных Telegram и Slack каналах. \r\n\r\n## 6. Подготовьтесь к собеседованиям\r\n\r\nСобеседования — это не только проверка знаний, но и ваша возможность показать свою мотивацию и умение работать в команде. Практикуйте ответы на технические и поведенческие вопросы, научитесь решать задачи на алгоритмы и структуры данных.\r\n\r\n## 7. Не сдавайтесь и анализируйте ошибки\r\n\r\nНайти первую работу может быть сложно, и это нормально. Не отчаивайтесь после отказов, а анализируйте их. Узнайте, что пошло не так, и улучшайте слабые стороны. Постепенно вы наберете опыт прохождения собеседований и сможете более уверенно представлять себя на рынке труда.\r\n\r\n---\r\n\r\nНайти первую работу Junior Python Backend разработчику — это задача, требующая терпения и упорства. Используйте каждую возможность для саморазвития, общения с профессионалами и практики. Удача любит настойчивых, и при правильном подходе ваш первый работодатель обязательно найдется!	2024-08-28 18:02:01+00	2024-08-28 18:02:48.621707+00	2024-08-28 18:19:44.777534+00	PB	1	posts/2024/08/28/IMG_2815.jpeg
\.


--
-- Data for Name: django_admin_log; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.django_admin_log (id, action_time, object_id, object_repr, action_flag, change_message, content_type_id, user_id) FROM stdin;
1	2024-08-24 21:41:08.665177+00	1	FastAPI vs Django: Что выбрать для вашего проекта?	1	[{"added": {}}]	7	1
2	2024-08-24 21:49:29.028305+00	2	Микросервисы: Что это такое и чем они отличаются от монолитов?	1	[{"added": {}}]	7	1
3	2024-08-24 21:50:28.893006+00	3	GIL в Python: Что это такое, его плюсы и минусы	1	[{"added": {}}]	7	1
4	2024-08-24 21:50:40.832689+00	3	GIL в Python: Что это такое, его плюсы и минусы	2	[{"changed": {"fields": ["Image"]}}]	7	1
5	2024-08-24 21:58:16.754425+00	4	Асинхронность, многопоточность и мультипроцессинг в Python: В чём разница?	1	[{"added": {}}]	7	1
6	2024-08-24 21:58:47.093407+00	4	Асинхронность, многопоточность и мультипроцессинг в Python: В чём разница?	2	[{"changed": {"fields": ["Image"]}}]	7	1
7	2024-08-24 22:05:56.972317+00	5	Планирование времени для удалённой работы: Советы программистам	1	[{"added": {}}]	7	1
8	2024-08-24 22:08:05.909573+00	5	Планирование времени для удалённой работы: Советы программистам	2	[{"changed": {"fields": ["Image"]}}]	7	1
9	2024-08-24 22:18:46.8602+00	2	Микросервисы: Что это такое и чем они отличаются от монолитов?	2	[{"changed": {"fields": ["Body"]}}]	7	1
10	2024-08-24 22:46:10.130858+00	5	Планирование времени для удалённой работы: Советы программистам	2	[{"changed": {"fields": ["Body"]}}]	7	1
11	2024-08-24 22:46:39.395033+00	5	Планирование времени для удалённой работы: Советы программистам	2	[{"changed": {"fields": ["Body"]}}]	7	1
12	2024-08-24 22:46:52.571261+00	5	Планирование времени для удалённой работы: Советы программистам	2	[{"changed": {"fields": ["Body"]}}]	7	1
13	2024-08-24 22:47:15.326016+00	5	Планирование времени для удалённой работы: Советы программистам	2	[{"changed": {"fields": ["Body"]}}]	7	1
14	2024-08-24 22:47:25.879304+00	5	Планирование времени для удалённой работы: Советы программистам	2	[{"changed": {"fields": ["Body"]}}]	7	1
15	2024-08-24 22:47:46.029474+00	5	Планирование времени для удалённой работы: Советы программистам	2	[{"changed": {"fields": ["Body"]}}]	7	1
16	2024-08-24 22:48:07.261635+00	5	Планирование времени для удалённой работы: Советы программистам	2	[{"changed": {"fields": ["Body"]}}]	7	1
17	2024-08-24 22:48:17.912533+00	5	Планирование времени для удалённой работы: Советы программистам	2	[{"changed": {"fields": ["Body"]}}]	7	1
18	2024-08-24 23:54:53.439008+00	1	platonov1727.ru	2	[{"changed": {"fields": ["Domain name", "Display name"]}}]	11	1
19	2024-08-24 23:55:42.398405+00	2	love	1	[{"added": {}}]	4	1
20	2024-08-24 23:57:22.000264+00	2	love	2	[{"changed": {"fields": ["First name", "Last name", "Email address", "Staff status", "User permissions"]}}]	4	1
21	2024-08-24 23:57:37.492882+00	1	platonov	2	[{"changed": {"fields": ["First name", "Last name"]}}]	4	1
22	2024-08-24 23:59:38.5547+00	1	FastAPI vs Django: Что выбрать для вашего проекта?	2	[{"changed": {"fields": ["Body"]}}]	7	1
23	2024-08-25 00:00:00.009984+00	1	FastAPI vs Django: Что выбрать для вашего проекта?	2	[{"changed": {"fields": ["Body"]}}]	7	1
24	2024-08-25 00:00:32.721513+00	1	FastAPI vs Django: Что выбрать для вашего проекта?	2	[{"changed": {"fields": ["Body"]}}]	7	1
25	2024-08-25 15:57:55.33178+00	1	platonov1727.ru	2	[]	11	1
26	2024-08-25 16:00:16.081391+00	1	127.0.0.1:8000	2	[{"changed": {"fields": ["Domain name"]}}]	11	1
27	2024-08-25 16:00:39.277342+00	1	platonov1727.ru	2	[{"changed": {"fields": ["Domain name"]}}]	11	1
28	2024-08-27 09:21:38.22626+00	6	Руководство по настройке Nginx для статических и медиафайлов в Django	1	[{"added": {}}]	7	1
29	2024-08-27 09:36:48.574277+00	6	Руководство по настройке Nginx для статических и медиафайлов в Django	2	[{"changed": {"fields": ["Body"]}}]	7	1
30	2024-08-27 10:13:21.179462+00	7	Test	1	[{"added": {}}]	7	1
31	2024-08-27 10:14:17.281029+00	7	Test	2	[{"changed": {"fields": ["Body"]}}]	7	1
32	2024-08-27 10:14:56.282026+00	7	Test	3		7	1
33	2024-08-27 10:32:31.276228+00	8	Контекстные менеджеры в Python	1	[{"added": {}}]	7	1
34	2024-08-27 13:06:22.676038+00	9	Интеграция Markdown в Django	1	[{"added": {}}]	7	1
35	2024-08-28 18:02:48.651516+00	10	Как Junior Python Backend разработчику найти первую работу	1	[{"added": {}}]	7	1
36	2024-08-28 18:19:44.805314+00	10	Как Junior Python Backend разработчику найти первую работу	2	[{"changed": {"fields": ["Image"]}}]	7	1
\.


--
-- Data for Name: django_content_type; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.django_content_type (id, app_label, model) FROM stdin;
1	admin	logentry
2	auth	permission
3	auth	group
4	auth	user
5	contenttypes	contenttype
6	sessions	session
7	blog	post
8	blog	comment
9	taggit	tag
10	taggit	taggeditem
11	sites	site
\.


--
-- Data for Name: django_migrations; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.django_migrations (id, app, name, applied) FROM stdin;
1	contenttypes	0001_initial	2024-08-24 21:34:41.328903+00
2	auth	0001_initial	2024-08-24 21:34:41.469688+00
3	admin	0001_initial	2024-08-24 21:34:41.515822+00
4	admin	0002_logentry_remove_auto_add	2024-08-24 21:34:41.525174+00
5	admin	0003_logentry_add_action_flag_choices	2024-08-24 21:34:41.53449+00
6	contenttypes	0002_remove_content_type_name	2024-08-24 21:34:41.551103+00
7	auth	0002_alter_permission_name_max_length	2024-08-24 21:34:41.559548+00
8	auth	0003_alter_user_email_max_length	2024-08-24 21:34:41.568846+00
9	auth	0004_alter_user_username_opts	2024-08-24 21:34:41.578014+00
10	auth	0005_alter_user_last_login_null	2024-08-24 21:34:41.590102+00
11	auth	0006_require_contenttypes_0002	2024-08-24 21:34:41.59154+00
12	auth	0007_alter_validators_add_error_messages	2024-08-24 21:34:41.597577+00
13	auth	0008_alter_user_username_max_length	2024-08-24 21:34:41.612657+00
14	auth	0009_alter_user_last_name_max_length	2024-08-24 21:34:41.619785+00
15	auth	0010_alter_group_name_max_length	2024-08-24 21:34:41.627286+00
16	auth	0011_update_proxy_permissions	2024-08-24 21:34:41.63469+00
17	auth	0012_alter_user_first_name_max_length	2024-08-24 21:34:41.64819+00
18	taggit	0001_initial	2024-08-24 21:34:41.702966+00
19	taggit	0002_auto_20150616_2121	2024-08-24 21:34:41.713294+00
20	taggit	0003_taggeditem_add_unique_index	2024-08-24 21:34:41.722759+00
21	taggit	0004_alter_taggeditem_content_type_alter_taggeditem_tag	2024-08-24 21:34:41.738187+00
22	taggit	0005_auto_20220424_2025	2024-08-24 21:34:41.7417+00
23	taggit	0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx	2024-08-24 21:34:41.754064+00
24	blog	0001_initial	2024-08-24 21:34:41.795854+00
25	blog	0002_alter_post_slug	2024-08-24 21:34:41.802776+00
26	blog	0003_comment	2024-08-24 21:34:41.827267+00
27	blog	0004_post_tags	2024-08-24 21:34:41.838057+00
28	blog	0005_post_image	2024-08-24 21:34:41.84989+00
29	sessions	0001_initial	2024-08-24 21:34:41.864761+00
30	sites	0001_initial	2024-08-24 21:34:41.871769+00
31	sites	0002_alter_domain_unique	2024-08-24 21:34:41.885082+00
\.


--
-- Data for Name: django_session; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.django_session (session_key, session_data, expire_date) FROM stdin;
ki9rq2icls7sfcnxy4nc1dd0bc9z21xd	.eJxVjDsOwjAQBe_iGllefxKZkp4zWLveDQ4gR4qTCnF3sJQC2pl576US7ltJe5M1zazOCtTplxHmh9Qu-I71tui81G2dSfdEH7bp68LyvBzt30HBVr5rAR4pA5IH65xFB0JBojMoOYLYwRrDk3gWiTIidzCFgZy3wZP16v0B9WM4DA:1shyQC:Tvh3W5tNrJpvQAUm2rQIgHEcZOI3j_-BOFgOazY_tGc	2024-09-07 21:35:44.503408+00
5xa3ukrptpqzhgl5y9bwax5o9c6723ww	.eJxVjDsOwjAQBe_iGllefxKZkp4zWLveDQ4gR4qTCnF3sJQC2pl576US7ltJe5M1zazOCtTplxHmh9Qu-I71tui81G2dSfdEH7bp68LyvBzt30HBVr5rAR4pA5IH65xFB0JBojMoOYLYwRrDk3gWiTIidzCFgZy3wZP16v0B9WM4DA:1shyXD:tbGs-cX1gM8jsv5PK8XYx626Qe0o3YxGWfxugSCNa68	2024-09-07 21:42:59.631029+00
mx68cqyt1tudrjnmzndhpkqnhxfoxmi2	.eJxVjDsOwjAQBe_iGllefxKZkp4zWLveDQ4gR4qTCnF3sJQC2pl576US7ltJe5M1zazOCtTplxHmh9Qu-I71tui81G2dSfdEH7bp68LyvBzt30HBVr5rAR4pA5IH65xFB0JBojMoOYLYwRrDk3gWiTIidzCFgZy3wZP16v0B9WM4DA:1shys2:M10ae3SmHN3S8anLzrLuXQmCUTubOt-NPAAJhWPJ7cA	2024-09-07 22:04:30.805224+00
xgir58wpq32lurd3wz54w32qhbsy3gs3	.eJxVjEEOwiAQRe_C2hCgOIBL9z0DmYFBqoYmpV0Z765NutDtf-_9l4i4rTVunZc4ZXERRpx-N8L04LaDfMd2m2Wa27pMJHdFHrTLcc78vB7u30HFXr-15TQgeU_ASrM2JgFkVwav4ezQAoZkgQMHawld1olZF6UQEKkECuL9Ae4dOJQ:1siBJJ:vlp867gKXkFgZ--OKhAfK9lfe6qKOAqfd7O0NJjGD2I	2024-09-08 11:21:29.898866+00
rfbsmwqsf2wf21pbxz7pyqgjjiw4m9nq	.eJxVjDsOwjAQBe_iGllefxKZkp4zWLveDQ4gR4qTCnF3sJQC2pl576US7ltJe5M1zazOCtTplxHmh9Qu-I71tui81G2dSfdEH7bp68LyvBzt30HBVr5rAR4pA5IH65xFB0JBojMoOYLYwRrDk3gWiTIidzCFgZy3wZP16v0B9WM4DA:1sisjP:qi0F4khdLITjp9OdsOuIR8UU-3-hP5biezbAXu8cO8Q	2024-09-10 09:43:19.582468+00
xqf0wdtkhxqz9rkmdmsg0lcsljhxj4jf	.eJxVjDsOwjAQBe_iGllefxKZkp4zWLveDQ4gR4qTCnF3sJQC2pl576US7ltJe5M1zazOCtTplxHmh9Qu-I71tui81G2dSfdEH7bp68LyvBzt30HBVr5rAR4pA5IH65xFB0JBojMoOYLYwRrDk3gWiTIidzCFgZy3wZP16v0B9WM4DA:1sitSm:h-Vr5VKENa9CtsvJJJT2i2faNOJJ_utANkBmgMGG22o	2024-09-10 10:30:12.343099+00
\.


--
-- Data for Name: django_site; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.django_site (id, domain, name) FROM stdin;
1	platonov1727.ru	platonov1727.ru
\.


--
-- Data for Name: taggit_tag; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.taggit_tag (id, name, slug) FROM stdin;
1	django	django
2	fastapi	fastapi
3	framework	framework
4	python	python
5	develop	develop
6	microservices	microservices
7	tech	tech
8	gil	gil
9	programming	programming
10	async	async
11	multiprocessing	multiprocessing
12	threading	threading
13	remote work	remote-work
14	work	work
15	devops	devops
16	nginx	nginx
17	test	test
18	context-managers	context-managers
19	job	job
\.


--
-- Data for Name: taggit_taggeditem; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.taggit_taggeditem (id, object_id, content_type_id, tag_id) FROM stdin;
1	1	7	1
2	1	7	2
3	1	7	3
4	1	7	4
5	2	7	5
6	2	7	6
7	2	7	7
8	3	7	8
9	3	7	9
10	3	7	4
11	3	7	7
12	4	7	10
13	4	7	5
14	4	7	11
15	4	7	4
16	4	7	12
17	5	7	5
18	5	7	13
19	5	7	14
20	6	7	15
21	6	7	1
22	6	7	16
23	6	7	4
25	8	7	18
26	8	7	9
27	8	7	4
28	8	7	7
29	9	7	1
30	9	7	4
31	9	7	7
32	10	7	19
33	10	7	4
\.


--
-- Name: auth_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.auth_group_id_seq', 1, false);


--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.auth_group_permissions_id_seq', 1, false);


--
-- Name: auth_permission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.auth_permission_id_seq', 44, true);


--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.auth_user_groups_id_seq', 1, false);


--
-- Name: auth_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.auth_user_id_seq', 2, true);


--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.auth_user_user_permissions_id_seq', 28, true);


--
-- Name: blog_comment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.blog_comment_id_seq', 1, false);


--
-- Name: blog_post_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.blog_post_id_seq', 10, true);


--
-- Name: django_admin_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.django_admin_log_id_seq', 36, true);


--
-- Name: django_content_type_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.django_content_type_id_seq', 11, true);


--
-- Name: django_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.django_migrations_id_seq', 31, true);


--
-- Name: django_site_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.django_site_id_seq', 1, true);


--
-- Name: taggit_tag_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.taggit_tag_id_seq', 19, true);


--
-- Name: taggit_taggeditem_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.taggit_taggeditem_id_seq', 33, true);


--
-- Name: auth_group auth_group_name_key; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_name_key UNIQUE (name);


--
-- Name: auth_group_permissions auth_group_permissions_group_id_permission_id_0cd325b0_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id);


--
-- Name: auth_group_permissions auth_group_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_group auth_group_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_pkey PRIMARY KEY (id);


--
-- Name: auth_permission auth_permission_content_type_id_codename_01ab375a_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename);


--
-- Name: auth_permission auth_permission_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_pkey PRIMARY KEY (id);


--
-- Name: auth_user_groups auth_user_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_pkey PRIMARY KEY (id);


--
-- Name: auth_user_groups auth_user_groups_user_id_group_id_94350c0c_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_group_id_94350c0c_uniq UNIQUE (user_id, group_id);


--
-- Name: auth_user auth_user_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_pkey PRIMARY KEY (id);


--
-- Name: auth_user_user_permissions auth_user_user_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_permission_id_14a6b632_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_permission_id_14a6b632_uniq UNIQUE (user_id, permission_id);


--
-- Name: auth_user auth_user_username_key; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_username_key UNIQUE (username);


--
-- Name: blog_comment blog_comment_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.blog_comment
    ADD CONSTRAINT blog_comment_pkey PRIMARY KEY (id);


--
-- Name: blog_post blog_post_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.blog_post
    ADD CONSTRAINT blog_post_pkey PRIMARY KEY (id);


--
-- Name: blog_post blog_post_slug_key; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.blog_post
    ADD CONSTRAINT blog_post_slug_key UNIQUE (slug);


--
-- Name: django_admin_log django_admin_log_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_pkey PRIMARY KEY (id);


--
-- Name: django_content_type django_content_type_app_label_model_76bd3d3b_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model);


--
-- Name: django_content_type django_content_type_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_pkey PRIMARY KEY (id);


--
-- Name: django_migrations django_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_migrations
    ADD CONSTRAINT django_migrations_pkey PRIMARY KEY (id);


--
-- Name: django_session django_session_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_session
    ADD CONSTRAINT django_session_pkey PRIMARY KEY (session_key);


--
-- Name: django_site django_site_domain_a2e37b91_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_site
    ADD CONSTRAINT django_site_domain_a2e37b91_uniq UNIQUE (domain);


--
-- Name: django_site django_site_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_site
    ADD CONSTRAINT django_site_pkey PRIMARY KEY (id);


--
-- Name: taggit_tag taggit_tag_name_key; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.taggit_tag
    ADD CONSTRAINT taggit_tag_name_key UNIQUE (name);


--
-- Name: taggit_tag taggit_tag_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.taggit_tag
    ADD CONSTRAINT taggit_tag_pkey PRIMARY KEY (id);


--
-- Name: taggit_tag taggit_tag_slug_key; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.taggit_tag
    ADD CONSTRAINT taggit_tag_slug_key UNIQUE (slug);


--
-- Name: taggit_taggeditem taggit_taggeditem_content_type_id_object_id_tag_id_4bb97a8e_uni; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.taggit_taggeditem
    ADD CONSTRAINT taggit_taggeditem_content_type_id_object_id_tag_id_4bb97a8e_uni UNIQUE (content_type_id, object_id, tag_id);


--
-- Name: taggit_taggeditem taggit_taggeditem_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.taggit_taggeditem
    ADD CONSTRAINT taggit_taggeditem_pkey PRIMARY KEY (id);


--
-- Name: auth_group_name_a6ea08ec_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX auth_group_name_a6ea08ec_like ON public.auth_group USING btree (name varchar_pattern_ops);


--
-- Name: auth_group_permissions_group_id_b120cbf9; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX auth_group_permissions_group_id_b120cbf9 ON public.auth_group_permissions USING btree (group_id);


--
-- Name: auth_group_permissions_permission_id_84c5c92e; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX auth_group_permissions_permission_id_84c5c92e ON public.auth_group_permissions USING btree (permission_id);


--
-- Name: auth_permission_content_type_id_2f476e4b; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX auth_permission_content_type_id_2f476e4b ON public.auth_permission USING btree (content_type_id);


--
-- Name: auth_user_groups_group_id_97559544; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX auth_user_groups_group_id_97559544 ON public.auth_user_groups USING btree (group_id);


--
-- Name: auth_user_groups_user_id_6a12ed8b; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX auth_user_groups_user_id_6a12ed8b ON public.auth_user_groups USING btree (user_id);


--
-- Name: auth_user_user_permissions_permission_id_1fbb5f2c; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX auth_user_user_permissions_permission_id_1fbb5f2c ON public.auth_user_user_permissions USING btree (permission_id);


--
-- Name: auth_user_user_permissions_user_id_a95ead1b; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX auth_user_user_permissions_user_id_a95ead1b ON public.auth_user_user_permissions USING btree (user_id);


--
-- Name: auth_user_username_6821ab7c_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX auth_user_username_6821ab7c_like ON public.auth_user USING btree (username varchar_pattern_ops);


--
-- Name: blog_commen_created_0e6ed4_idx; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX blog_commen_created_0e6ed4_idx ON public.blog_comment USING btree (created);


--
-- Name: blog_comment_post_id_580e96ef; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX blog_comment_post_id_580e96ef ON public.blog_comment USING btree (post_id);


--
-- Name: blog_post_author_id_dd7a8485; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX blog_post_author_id_dd7a8485 ON public.blog_post USING btree (author_id);


--
-- Name: blog_post_publish_bb7600_idx; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX blog_post_publish_bb7600_idx ON public.blog_post USING btree (publish DESC);


--
-- Name: blog_post_slug_b95473f2_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX blog_post_slug_b95473f2_like ON public.blog_post USING btree (slug varchar_pattern_ops);


--
-- Name: blog_post_slug_cdb902_idx; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX blog_post_slug_cdb902_idx ON public.blog_post USING btree (slug);


--
-- Name: django_admin_log_content_type_id_c4bce8eb; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_admin_log_content_type_id_c4bce8eb ON public.django_admin_log USING btree (content_type_id);


--
-- Name: django_admin_log_user_id_c564eba6; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_admin_log_user_id_c564eba6 ON public.django_admin_log USING btree (user_id);


--
-- Name: django_session_expire_date_a5c62663; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_session_expire_date_a5c62663 ON public.django_session USING btree (expire_date);


--
-- Name: django_session_session_key_c0390e0f_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_session_session_key_c0390e0f_like ON public.django_session USING btree (session_key varchar_pattern_ops);


--
-- Name: django_site_domain_a2e37b91_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_site_domain_a2e37b91_like ON public.django_site USING btree (domain varchar_pattern_ops);


--
-- Name: taggit_tag_name_58eb2ed9_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX taggit_tag_name_58eb2ed9_like ON public.taggit_tag USING btree (name varchar_pattern_ops);


--
-- Name: taggit_tag_slug_6be58b2c_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX taggit_tag_slug_6be58b2c_like ON public.taggit_tag USING btree (slug varchar_pattern_ops);


--
-- Name: taggit_tagg_content_8fc721_idx; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX taggit_tagg_content_8fc721_idx ON public.taggit_taggeditem USING btree (content_type_id, object_id);


--
-- Name: taggit_taggeditem_content_type_id_9957a03c; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX taggit_taggeditem_content_type_id_9957a03c ON public.taggit_taggeditem USING btree (content_type_id);


--
-- Name: taggit_taggeditem_object_id_e2d7d1df; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX taggit_taggeditem_object_id_e2d7d1df ON public.taggit_taggeditem USING btree (object_id);


--
-- Name: taggit_taggeditem_tag_id_f4f5b767; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX taggit_taggeditem_tag_id_f4f5b767 ON public.taggit_taggeditem USING btree (tag_id);


--
-- Name: auth_group_permissions auth_group_permissio_permission_id_84c5c92e_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_group_permissions auth_group_permissions_group_id_b120cbf9_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_permission auth_permission_content_type_id_2f476e4b_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_groups auth_user_groups_group_id_97559544_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_group_id_97559544_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_groups auth_user_groups_user_id_6a12ed8b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_6a12ed8b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_user_permissions auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: blog_comment blog_comment_post_id_580e96ef_fk_blog_post_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.blog_comment
    ADD CONSTRAINT blog_comment_post_id_580e96ef_fk_blog_post_id FOREIGN KEY (post_id) REFERENCES public.blog_post(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: blog_post blog_post_author_id_dd7a8485_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.blog_post
    ADD CONSTRAINT blog_post_author_id_dd7a8485_fk_auth_user_id FOREIGN KEY (author_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_content_type_id_c4bce8eb_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_user_id_c564eba6_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_user_id_c564eba6_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: taggit_taggeditem taggit_taggeditem_content_type_id_9957a03c_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.taggit_taggeditem
    ADD CONSTRAINT taggit_taggeditem_content_type_id_9957a03c_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: taggit_taggeditem taggit_taggeditem_tag_id_f4f5b767_fk_taggit_tag_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.taggit_taggeditem
    ADD CONSTRAINT taggit_taggeditem_tag_id_f4f5b767_fk_taggit_tag_id FOREIGN KEY (tag_id) REFERENCES public.taggit_tag(id) DEFERRABLE INITIALLY DEFERRED;


--
-- PostgreSQL database dump complete
--

